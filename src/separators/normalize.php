<?php
/**
 * Нормалізувати шлях відповідно до сепаратора директорій для поточної операційної системи.
 * Використовуйте `/` або `\` для розділення директорій, а ця функція замінить всі роздільники, що не відповідають поточній ОС, на відповідний.
 *
 * ***Для використання спеціального роздільника вкладеності (константа NS) типу `>` або `.` скористайтесь іншими функціями:
 * `pathNormalize()` та `pathNormalizePlus()` або
 * `pathNormalizeSmart()` та `pathNormalizeSmartPlus()`, що підтримують `>` і `.` одночасно не залежно від NS.***
 */
function dsNormalize(string $path): string {
    return str_replace(DS === '/' ? '\\' : '/', DS, $path);
}



/**
 * Отримати коректний шлях замінивши всі роздільники вкладеності згідно константи NS (може бути `>` або `.`)
 * на справжній сепаратор директорій для поточної операційної системи.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 *
 * @param string $path для розділення директорій використовувати ТІЛЬКИ знак що відповідає константі NS (наприклад: `path>to>file.php`)
 *
 * ***Не використовуйте `/` або `\` адже функція їх не приведе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalize(string $path): string {
    return str_replace(NS, DS, $path);
}

/**
 * Отримати коректний шлях замінивши всі `>` та `.` (не залежно від константи NS) на справжній сепаратор директорій для поточної операційної системи.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 *
 * Важливо! Для розділення директорій допускається використовувати знак `>` та `.`, в тому числі одночасно (наприклад: `path>to>file.php`),
 * але слід враховувати, що всі ці знаки буде перетворено на сепаратор директорій
 * (тобто для linux приклад буде перетворено на `path/to/file/php`, а для windows на `path\to\file\php`).
 * Отже, ця функція не підходить коли потрібно вказати шлях до файлу з його розширенням!
 * Для кращої читабельності рекомендується використовувати лише якийсь один знак.
 *
 * @param string $path для розділення директорій допускається використовувати знак `>` та `.` (наприклад: `path>to>dir` або `path.to.dir`)
 *
 * ***Не використовуйте `/` або `\` адже функція їх не приведе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalizeSmart(string $path): string {
    return preg_replace('/\.|\>/', DS, $path);
}



/**
 * Аналогічно до `pathNormalize()`, але додано підтримку альтернативного зворотного ходу по директоріям.
 * Повертає коректний шлях замінивши всі:
 * - роздільники вкладеності згідно константи NS (може бути `>` або `.`) - на справжній сепаратор директорій для поточної операційної системи,
 * - роздільники зворотної вкладеності згідно константи BNS (може бути `<` або `^`) - на `../` або `..\` в залежності від сепаратора директорій для поточної ОС.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 * 
 * @param string $path для розділення директорій використовувати ТІЛЬКИ знаки що відповідає константі NS або BNS (наприклад: `path>to>file.php` або `<path>of>root`)
 * 
 * ***Не використовуйте `/` або `\` адже функція їх не приведе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalizePlus(string $path): string {
    return str_replace(BNS, '..' . DS, str_replace(NS, DS, $path));
}

/**
 * Аналогічно до `pathNormalizeSmart()`, але додано підтримку альтернативного зворотного ходу по директоріям.
 * Повертає коректний шлях замінивши всі:
 * - роздільники вкладеності `>` та `.` (не залежно від константи NS) - на справжній сепаратор директорій для поточної операційної системи,
 * - роздільники зворотної вкладеності `<` та `^` (не залежно від константи BNS) - на `../` або `..\` в залежності від сепаратора директорій для поточної ОС.
 * Потрібно використовувати для обробки всіх шляхів (окрім URL) щоб дозволити безпечне перенесення коду між пристроями з різними ОС.
 *
 * Важливо! Для розділення директорій допускається використовувати знак `>` та `.`, в тому числі одночасно (наприклад: `path>to>file.php`),
 * але слід враховувати, що всі ці знаки буде перетворено на сепаратор директорій
 * (тобто для linux приклад буде перетворено на `path/to/file/php`, а для windows на `path\to\file\php`).
 * Отже, ця функція не підходить коли потрібно вказати шлях до файлу з його розширенням!
 * Для кращої читабельності рекомендується використовувати лише якийсь один знак.
 *
 * @param string $path для розділення директорій допускається використовувати знак `>`, `.`, а також `<` та `^`
 * (наприклад: `path>to>dir` або `<path.of.root.dir` або `^path.of.root.dir`)
 *
 * ***Не використовуйте `/` або `\` адже функція їх не приведе у відповідність до ОС - для цього є функція dsNormalize()***
 */
function pathNormalizeSmartPlus(string $path): string {
    return preg_replace('/\<|\^/', '..' . DS, preg_replace('/\.|\>/', DS, $path));
}